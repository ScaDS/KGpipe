rdf_a:
    description: "Align source RDF with target KG"
    config:
        ENTITY_MATCHING_THRESHOLD: "0.5"
        RELATION_MATCHING_THRESHOLD: "0.5"
    tasks:
        # 1 Use paris matcher to match source and target RDF
        - paris_entity_matching
        # 2 Convert paris csv to entity resolution primary format
        - paris_exchange
        # 3 Fuse matched RDF (threshold 0.5)
        - fusion_first_value
        - type_inference_ontology_simple


rdf_b:
    description: "Align source RDF with target KG with a tabular matching approach"
    config:
        ENTITY_MATCHING_THRESHOLD: "0.5"
        RELATION_MATCHING_THRESHOLD: "0.1"
    tasks:
        # 1 Generate 2 csv files from RDF
        - transform2_rdf_to_csv
        # 2 Use jedai tab matcher to match source and target csv
        - pyjedai_entity_matching
        - reduce_to_best_match_per_entity
        # 3 Use valentine schema matching to match source and target csv
        - valentine_csv_matching
        # 4 Fuse matched RDF (threshold 0.5)
        - aggregate_2matches
        - fusion_first_value

rdf_b2:
    description: "Align source RDF with target KG with a tabular matching approach"
    config:
        ENTITY_MATCHING_THRESHOLD: "0.5"
        RELATION_MATCHING_THRESHOLD: "0.1"
    tasks:
        - transform2_rdf_to_csv_v2
        - pyjedai_entity_matching_v2
        - reduce_to_best_match_per_entity
        - valentine_csv_matching_v2
        - aggregate_2matches
        - fusion_first_value

rdf_llm_schema_align_v1:
    description: "Align relations of source RDF with target KG using LLM"
    config:
        ENTITY_MATCHING_THRESHOLD: "0.5"
        RELATION_MATCHING_THRESHOLD: "0.5"
        LLM_MODEL: "gpt-5-mini"
    tasks:
        # 1 Use LLM to match relations
        - llm_task_rdf_ontology_matching_v1 # results in er.json
        # 2 Map source KG relations to matching target KG relations
        # - map_kg_alignments
        - map_er_match_relations
        # 3 Match entities with paris
        - paris_entity_matching
        # 4 Exchange matched RDF
        - paris_exchange
        # 5 Fuse matched RDF maybe only entities
        - fusion_first_value
        - type_inference_ontology_simple

# rdf_llm_construction:
#     description: "Applying a LLM-based approach for mapping RDF to ontology directly"
#     tasks:
#         # 1 Use LLM to link entities
#         - construct_from_any_input
#         # 2 Use LLM to link relations
#         - select_first_value

# rdf_llm_full_integration:
#     description: "Generate RDF from RDF given full KG (ontology + KG)"
#     tasks:
#         - construct_from_any_input_with_kg_and_ontology
#         - select_first_value

json_a:
    description: "Construct intermediate RDF from JSON"
    tasks:
        # 1 Nested tree Json to generic RDF graph
        - construct_rdf_from_json2
        # 2 Match RDF graph with seed
        - paris_entity_matching
        # 3 exchange 
        - paris_exchange
        # 4 Fuse matched RDF (threshold 0.5)
        - fusion_first_value
        - type_inference_ontology_simple

# json_b:
#     description: "Link JSON objects to target KG"
#     tasks:
#         # construct TE_Document from JSON
#         - construct_linkedrdf_from_json
#         # 4 Fuse matched RDF (threshold 0.5)
#         - select_first_value

json_b:
    description: "Link JSON objects to target KG"
    tasks:
        # construct TE_Document from JSON
        - construct_linkedrdf_from_json_v2
        # 4 Fuse matched RDF (threshold 0.5)
        - select_first_value

# json_c:
#     description: "(TODO) extract json to te_doc tripels (subject is identified label) apply entity_linking, and relation_linking"
#     tasks:
#         - construct_te_triples_from_te_json
#         - paris_entity_matching
#         - paris_exchange
#         - fusion_union_rdf

json_llm_mapping_v1:
    description: "Align JSON path to target KG (ontology + sample KG)"
    tasks:
        # llm json path mapping
        - llm_task_map_and_construct
        - aggregate_rdf_files
        - paris_entity_matching
        - paris_exchange
        - fusion_first_value
        - type_inference_ontology_simple
        # apply json path mapping
        # paris entity matching
        # paris exchange
        # fusion first value

# json_llm_semi_integration:
#     description: "Generate RDF from JSON given only ontology"
#     tasks:
#         - construct_from_any_input_with_ontology_as_json_ld
#         - paris_entity_matching
#         - paris_exchange
#         - select_first_value

# json_llm_full_integration:
#     description: "Generate RDF from JSON given full KG (ontology + KG)"
#     tasks:
#         - construct_from_any_input_with_kg_and_ontology
#         - select_first_value

text_a:
    description: "Use spoltight build RDF stagging Graph and apply Paris matching"
    tasks:
        - corenlp_openie_extraction
        - corenlp_exchange
        - label_alias_embedding_rl
        - dbpedia_spotlight_ner_nel
        - dbpedia_spotlight_exchange
        - aggregate3_te_json
        - construct_rdf_from_te_json
        - paris_entity_matching
        - paris_exchange
        - fusion_first_value
        - type_inference_ontology_simple


text_b:
    description: "(semi expensive) Use mini transformer to link entities and relations (label+alias)"
    tasks:
        - corenlp_openie_extraction # ("Berlin", "is a", "city")
        - corenlp_exchange
        - label_alias_embedding_el # ("Berlin" -> http://dbpedia.org/resource/Berlin)
        - label_alias_embedding_rl # ("is a" -> "rdf:type")
        - aggregate3_te_json
        - construct_rdf_from_te_json
        - select_first_value

text_llm_triple_extract_v1:
    description: "Extract RDF from TEXT using LLM"
    config:
        LLM_MODEL: "gpt-5-mini"
    tasks:
        - llm_task_text_triple_extract_v1
        - label_alias_embedding_el # ("Berlin" -> http://dbpedia.org/resource/Berlin)
        - label_alias_embedding_rl # ("is a" -> "rdf:type")
        - aggregate3_te_json
        - construct_rdf_from_te_json
        - select_first_value
        # - type_inference_ontology_simple

# text_llm_semi_integration:
#     description: "Generate RDF from TEXT given only ontology"
#     tasks:
#         - construct_from_any_input_with_ontology_as_json_ld
#         - paris_entity_matching
#         - paris_exchange
#         - fusion_first_value        

# text_llm_full_integration:
#     description: "Generate RDF from TEXT given full KG (ontology + KG)"
#     tasks:
#         - construct_from_any_input_with_kg_and_ontology
#         - select_first_value
#         - paris_entity_matching
#         - paris_exchange
#         - fusion_first_value

# text_gpt_4o_mini:
#     description: "Test pipeline"
#     config:
#         LLM_MODEL: "gpt-4o-mini"
#     tasks:
#         - construct_from_any_input_with_ontology_as_json_ld
#         - paris_entity_matching
#         - paris_exchange
#         - fusion_first_value

# text_gpt_o4_mini:
#     description: "Test pipeline"
#     config:
#         LLM_MODEL: "o4-mini"
#     tasks:
#         - construct_from_any_input_with_ontology_as_json_ld
#         - paris_entity_matching
#         - paris_exchange
#         - fusion_first_value

# text_gpt_4_1_mini:
#     description: "Test pipeline"
#     config:
#         LLM_MODEL: "gpt-4.1-mini"
#     tasks:
#         - construct_from_any_input_with_ontology_as_json_ld
#         - paris_entity_matching
#         - paris_exchange
#         - fusion_first_value

# text_gpt_5_nano:
#     description: "Test pipeline"
#     config:
#         LLM_MODEL: "gpt-5-nano"
#     tasks:
#         - construct_from_any_input_with_ontology_as_json_ld
#         - paris_entity_matching
#         - paris_exchange
#         - fusion_first_value

# text_gpt_5_mini:
#     description: "Test pipeline"
#     config:
#         LLM_MODEL: "gpt-5-mini"
#     tasks:
#         - construct_from_any_input_with_ontology_as_json_ld
#         - paris_entity_matching
#         - paris_exchange
#         - fusion_first_value
